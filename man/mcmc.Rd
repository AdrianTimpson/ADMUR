\name{mcmc} 
\alias{mcmc} 
\title{Makes a MCMC chain using the Metropolis-Hastings algorithm.} 
\description{Generates a single Markov Chain Monte Carlo using the Metropolis-Hastings algorithm.}
\usage{mcmc(PDarray, startPars, N = 30000, burn = 2000, thin = 5, jumps = 0.02)}
\arguments{
  \item{PDarray}{
	A Probability Density Array of calibrated dates, generated by \code{\link[=phaseCalibrator]{phaseCalibrator}} .
	}
  \item{startPars}{
	A vector of parameter values (between 0 and 1) for the algorithm to start at. Suggest using the parameters found from a Maximum Likelihood search. Must have an odd length, as the number of free parameters for an n-CPL model is 2n-1
	}
  \item{N}{
	The total number of proposals made, before the chain is reduced for burn-in and thinning.
	}
  \item{burn}{
	The number of proposals made at the beginning of the chain to be disregarded as burn-in.
	}
  \item{thin}{
	Specifies the proportion of proposals to be disregarded (after burn-in), such that the default 5 will only keep every 5th proposal.
	}
  \item{jumps}{
	Specifies the size of the random jump between the last parameters and the proposed parameters. A smaller value gives a smaller jump.
	}

}
\value{
	Returns a list including:
	\item{res}{A 2D matrix of free parameter values (between 0 and 1) in the chain, after burn-in and thinning.}
	\item{all.pars}{A 2D matrix of free parameter values (between 0 and 1) in the chain of all N proposals.}
	\item{acceptance.ratio}{The proportion of proposals (after burn-in) that are accepted.}
	}
\details{
	Generates a single MCMC chain using the Metropolis-Hastings algorithm, printing to screen progress every 1000 proposals. An acceptance ratio of around 0.4 to 0.5 should be sought by adapting the arguments 'burn' and 'jumps'. If the acceptance ratio is too low try reducing jump. A larger dataset will typically require smaller jumps.
	}
\examples{
# generate some random cal dates
pop.years <- as.numeric(row.names(toy$population))
mod.years <- as.numeric(row.names(toy$model))
set.seed(12345)
cal <- sample(x = pop.years, size = 99, replace = TRUE, prob = toy$population$individuals ) 

# Convert to 14C dates. 14C errors are borrowed from the real dataset 'arid' for realism.
age <- uncalibrateCalendarDates(cal, shcal20)
sd <- sample(x = arid$sd, size = 99, replace = TRUE)
data <- data.frame(age = age, sd = sd, phase = 1:99, datingType = '14C')

# Calibrate each phase, taking care to restrict to the modelled date range
CalArray <- makeCalArray(shcal20, calrange = range(mod.years), inc = 1)
PD <- phaseCalibrator(data, CalArray)
i <- colSums(PD) >= (0.5 / CalArray$inc) 
PD <- PD[,i] 

# Run MCMC for a 3-CPL model (5 parameters)
chain <- mcmc(PDarray = PD, startPars = c(0.5,0.5,0.5,0.5,0.5), N = 30000, burn = 2000, thin = 5, jumps = 0.1)	
}
